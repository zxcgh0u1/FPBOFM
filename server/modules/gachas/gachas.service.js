import { prisma } from '../../db/client.js';
import { EGG_COST, CHEST_COST, rarityWeights } from '../../config/economy.js';

// üé≤ –†–∞–Ω–¥–æ–º –ø–æ –≤–µ—Å–∞–º
function getRandomRarity() {
  const roll = Math.random() * 100;
  let cumulative = 0;

  for (const [rarity, weight] of Object.entries(rarityWeights)) {
    cumulative += weight;
    if (roll <= cumulative) return rarity;
  }
  return 'COMMON';
}

// ü•ö –û—Ç–∫—Ä—ã—Ç—å —è–π—Ü–æ
export async function openEgg(userId) {
  const wallet = await prisma.wallet.findUnique({ where: { userId } });
  if (!wallet || wallet.balance < EGG_COST) {
    throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —è–π—Ü–∞');
  }

  await prisma.wallet.update({
    where: { userId },
    data: { balance: { decrement: EGG_COST } }, // ‚úÖ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
  });

  const rarity = getRandomRarity();
  const spec = await prisma.creatureSpec.findFirst({ where: { rarity } });
  if (!spec) throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏');

  return prisma.creatureInstance.create({
    data: {
      ownerId: userId,
      specId: spec.id,
      hp: spec.baseHP,
      atk: spec.baseATK,
      def: spec.baseDEF,
      stars: 1,
    },
    include: { spec: true },
  });
}

// üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å—É–Ω–¥—É–∫
export async function openChest(userId) {
  const wallet = await prisma.wallet.findUnique({ where: { userId } });
  if (!wallet || wallet.balance < CHEST_COST) {
    throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—É–Ω–¥—É–∫–∞');
  }

  await prisma.wallet.update({
    where: { userId },
    data: { balance: { decrement: CHEST_COST } }, // ‚úÖ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
  });

  const rarity = getRandomRarity();
  const spec = await prisma.creatureSpec.findFirst({ where: { rarity } });
  if (!spec) throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏');

  return prisma.creatureInstance.create({
    data: {
      ownerId: userId,
      specId: spec.id,
      hp: spec.baseHP,
      atk: spec.baseATK,
      def: spec.baseDEF,
      stars: 1,
    },
    include: { spec: true },
  });
}
